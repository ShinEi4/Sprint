Sprint 0 :
    Avoir l'url de la requête : request.getRequestURL()

Sprint 1 :
    Création annotation controller
    Init Param (web.xml)
    Afficher tout les controllers dans le même package

Sprint 2 :
    Mapping des urls avec les controllers et les methods en utilisant l'annotation GET
    
Sprint 3 :
    Exécuter la méthode de la classe associée à une URL donnée (utiliser la méthode invoke)

Sprint 4 :
    Envoyer des données du controller vers view
    Création classe ModelView
    Création fonction AddObject
    Récupérer les données issues de la méthode annotée Get
    Condition pour les types de données dans front controller

Sprint 5 :
    Ajout Classe FrameworkError pour gérer les erreurs dans le front controller et pour plus de visibilité
    Afficher des erreurs
    Erreurs :
        - package vide ou package qui n'existe pas
        - url n'existe pas
        - url methode dupliquer (1 url +eurs methodes)
        - type de retour non valide

Sprint 6 :
    Ajout annotation @Param pour récupérer les données d'un formulaire
    Récupération des paramètres d'une méthode et conversion des types
    Ajout du paramètre HttpServletRequest dans la fonction invoquant les méthodes des contrôleurs

Sprint 7 :
    Ajout des annotations pour la gestion des objets en paramètres :
        - @ModelAttribute : Pour marquer un paramètre comme objet à remplir automatiquement
        - @RequestParam : Pour lier les champs d'un objet aux paramètres du formulaire
    Amélioration du FrontController :
        - Ajout de la méthode handleModelAttribute pour gérer les objets annotés
        - Remplissage automatique des attributs d'objets depuis les paramètres de requête
        - Support des noms de champs personnalisés via @RequestParam(name="...")

Sprint 8 :
    Ajout de la gestion des sessions :
        - Création de la classe MySession pour encapsuler HttpSession
        - Implémentation des méthodes de gestion :
            * add(String key, Object value) : Ajouter une donnée en session
            * get(String key) : Récupérer une donnée de la session
            * delete(String key) : Supprimer une donnée de la session
            * invalidate() : Détruire la session

Sprint 9 :
    Ajout du support des API REST :
        - Création de l'annotation @RestAPI pour marquer les méthodes REST
        - Intégration de la bibliothèque Gson pour la sérialisation JSON
        - Modification du FrontController :
            * Détection des méthodes annotées avec @RestAPI
            * Sérialisation automatique des réponses en JSON
            * Support de tout type de retour pour les API REST
            * Gestion spéciale des ModelView pour extraire uniquement les données
        
Sprint 10 :
    Ajout de l'annotation @POST 
    Si une méthode n'a pas d'annotation, elle sera considérée comme une méthode GET par défaut
    Ajout des gestions de VERB POST et GET uniquement

Sprint 11 :
    Afficher les erreurs dans une page d'erreur

Sprint 12 :
    Gestion d'upload de fichier
    Verification si le formulaire a bien l'attribut enctype="multipart/form-data"
    Gerer la récupération des fichiers

Sprint 13 :
    Gestion de la validation des données
    Ajout des annotations :
        - @Required : Indique que le champ est obligatoire
        - @Min : Indique la valeur minimale
        - @Max : Indique la valeur maximale
        - @Email : Indique que le champ doit être une adresse email valide
    Ajout de la classe ValidationError pour stocker les erreurs de validation
    Ajout de la méthode displayValidationErrors dans le FrontController pour afficher les erreurs de validation
    
Sprint 14 :
    Retour vers l'url appellant en cas d'erreur de validation
    Ajouter annotation @FormUrl pour indiquer l'url du formulaire (nécessaire pour le retour vers le formulaire en cas d'erreur de validation)

Sprint 15 :
    Gestion de l'authentification
    Gestion des rôles
    Ajout de l'annotation @Role pour indiquer le rôle nécessaire pour accéder à une méthode
    Ajout de la classe RoleLevel pour gérer les niveaux de rôles
    Ajout de la classe AuthManager pour gérer les autorisations
    
